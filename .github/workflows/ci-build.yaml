name: "CI for Application"

on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - '*'
    branches:
      - main

env:
  DOCKER_REGISTRY: davidh83110/flask-app

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
    - name: Check out the repository
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit --no-cache-dir
        pip install pipenv --no-cache-dir
        pipenv install --system --deploy --ignore-pipfile
    - name: Run Unittest
      run: |
        pipenv run pytest
    - name: Run Bandit for Python Common Security Check - SAST(Static Application Security Testing)
      run: |
        bandit -c bandit.yaml -r .
    - name: Docker buildx Setup
      uses: docker/setup-buildx-action@v1
    - name: Build Image
      run: |
        docker build -t flask-app .
    - name: Start Application for Testing
      run: |
        echo "Redis container IP: ${{ job.services.redis.host }}"
        docker run -p 3000:3000 --name flask-app -e REDIS_HOST="${{ job.services.redis.host }}" -itd flask-app:latest
        if [[ $(curl -L http://127.0.0.1:3000/health | jq .status) -eq "healthy" ]]; then 
          echo "container is healthy";
        else
          docker logs flask-app
          echo "/health didn't return 200, hence pipeline will exit"
          exit 1
        fi;

    - name: Login to Docker Hub
      run: |
        docker login "${{ env.DOCKER_REGISTRY }}" -u "${{ secrets.DOCKER_USER }}" -p "${{ secrets.DOCKER_PASSWORD }}"
    - name: Push Image to Docker Hub
      run: |
        docker tag flask-app:latest "${{ env.DOCKER_REGISTRY }}":"${{ github.ref_name }}"
        docker push "${{ env.DOCKER_REGISTRY }}":"${{ github.ref_name }}"
    - name: Log out from Docker Hub
      run: docker logout
    - name: Package Helm Chart
      ## TODO: helm dry run and lint tests
      run: helm package deploy/charts -d chart-"${{ github.ref_name }}"
